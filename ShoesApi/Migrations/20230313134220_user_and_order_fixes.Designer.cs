// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShoesApi;

#nullable disable

namespace ShoesApi.Migrations
{
    [DbContext(typeof(ShoesDbContext))]
    [Migration("20230313134220_user_and_order_fixes")]
    partial class user_and_order_fixes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShoesApi.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_name");

                    b.ToTable("brands", (string)null);

                    b.HasComment("Брэнды");
                });

            modelBuilder.Entity("ShoesApi.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_destinations");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_destinations_name");

                    b.ToTable("destinations", (string)null);

                    b.HasComment("Назначение обуви");
                });

            modelBuilder.Entity("ShoesApi.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<int>("Sum")
                        .HasColumnType("integer")
                        .HasColumnName("sum");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", (string)null);

                    b.HasComment("Заказ");
                });

            modelBuilder.Entity("ShoesApi.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("ShoeId")
                        .HasColumnType("integer")
                        .HasColumnName("shoe_id");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("ShoeId")
                        .HasDatabaseName("ix_order_items_shoe_id");

                    b.HasIndex("SizeId")
                        .HasDatabaseName("ix_order_items_size_id");

                    b.HasIndex("OrderId", "ShoeId", "SizeId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_shoe_id_size_id");

                    b.ToTable("order_items", (string)null);

                    b.HasComment("Часть заказа");
                });

            modelBuilder.Entity("ShoesApi.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seasons_name");

                    b.ToTable("seasons", (string)null);

                    b.HasComment("Сезон");
                });

            modelBuilder.Entity("ShoesApi.Entities.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("integer")
                        .HasColumnName("destination_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image")
                        .HasComment("Название изображения (для пути)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price")
                        .HasComment("Цена");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_shoes");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_shoes_brand_id");

                    b.HasIndex("DestinationId")
                        .HasDatabaseName("ix_shoes_destination_id");

                    b.HasIndex("Image")
                        .IsUnique()
                        .HasDatabaseName("ix_shoes_image");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_shoes_name");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_shoes_season_id");

                    b.ToTable("shoes", (string)null);

                    b.HasComment("Обувь");
                });

            modelBuilder.Entity("ShoesApi.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RuSize")
                        .HasColumnType("integer")
                        .HasColumnName("ru_size");

                    b.HasKey("Id")
                        .HasName("pk_sizes");

                    b.HasIndex("RuSize")
                        .IsUnique()
                        .HasDatabaseName("ix_sizes_ru_size");

                    b.ToTable("sizes", (string)null);

                    b.HasComment("Размеры");
                });

            modelBuilder.Entity("ShoesApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_users_login");

                    b.ToTable("users", (string)null);

                    b.HasComment("Пользователи");
                });

            modelBuilder.Entity("ShoeSize", b =>
                {
                    b.Property<int>("ShoesId")
                        .HasColumnType("integer")
                        .HasColumnName("shoes_id");

                    b.Property<int>("SizesId")
                        .HasColumnType("integer")
                        .HasColumnName("sizes_id");

                    b.HasKey("ShoesId", "SizesId")
                        .HasName("pk_shoes_sizes");

                    b.HasIndex("SizesId")
                        .HasDatabaseName("ix_shoes_sizes_sizes_id");

                    b.ToTable("shoes_sizes", (string)null);
                });

            modelBuilder.Entity("ShoesApi.Entities.Order", b =>
                {
                    b.HasOne("ShoesApi.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShoesApi.Entities.OrderItem", b =>
                {
                    b.HasOne("ShoesApi.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("ShoesApi.Entities.Shoe", "Shoe")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_shoes_shoe_id");

                    b.HasOne("ShoesApi.Entities.Size", "Size")
                        .WithMany("OrderItems")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_sizes_size_id");

                    b.Navigation("Order");

                    b.Navigation("Shoe");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShoesApi.Entities.Shoe", b =>
                {
                    b.HasOne("ShoesApi.Entities.Brand", "Brand")
                        .WithMany("Shoes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_shoes_brands_brand_id");

                    b.HasOne("ShoesApi.Entities.Destination", "Destination")
                        .WithMany("Shoes")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_shoes_destinations_destination_id");

                    b.HasOne("ShoesApi.Entities.Season", "Season")
                        .WithMany("Shoes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_shoes_seasons_season_id");

                    b.Navigation("Brand");

                    b.Navigation("Destination");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ShoeSize", b =>
                {
                    b.HasOne("ShoesApi.Entities.Shoe", null)
                        .WithMany()
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shoes_sizes_shoes_shoes_id");

                    b.HasOne("ShoesApi.Entities.Size", null)
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shoes_sizes_sizes_sizes_id");
                });

            modelBuilder.Entity("ShoesApi.Entities.Brand", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoesApi.Entities.Destination", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoesApi.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShoesApi.Entities.Season", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoesApi.Entities.Shoe", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShoesApi.Entities.Size", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShoesApi.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
