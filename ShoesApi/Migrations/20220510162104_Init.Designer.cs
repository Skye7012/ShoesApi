// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShoesApi;

#nullable disable

namespace ShoesApi.Migrations
{
    [DbContext(typeof(ShoesDbContext))]
    [Migration("20220510162104_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShoesApi.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_name");

                    b.ToTable("brands", (string)null);

                    b.HasComment("Брэнды");
                });

            modelBuilder.Entity("ShoesApi.Entities.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_destinations");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_destinations_name");

                    b.ToTable("destinations", (string)null);

                    b.HasComment("Назначение обуви");
                });

            modelBuilder.Entity("ShoesApi.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_seasons");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_seasons_name");

                    b.ToTable("seasons", (string)null);

                    b.HasComment("Сезон");
                });

            modelBuilder.Entity("ShoesApi.Entities.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("integer")
                        .HasColumnName("destination_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image")
                        .HasComment("Название изображения (для пути)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price")
                        .HasComment("Цена");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("integer")
                        .HasColumnName("season_id");

                    b.HasKey("Id")
                        .HasName("pk_shoes");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_shoes_brand_id");

                    b.HasIndex("DestinationId")
                        .HasDatabaseName("ix_shoes_destination_id");

                    b.HasIndex("Image")
                        .IsUnique()
                        .HasDatabaseName("ix_shoes_image");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_shoes_name");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("ix_shoes_season_id");

                    b.ToTable("shoes", (string)null);

                    b.HasComment("Обувь");
                });

            modelBuilder.Entity("ShoesApi.Entities.Shoe", b =>
                {
                    b.HasOne("ShoesApi.Entities.Brand", "Brand")
                        .WithMany("Shoes")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_shoes_brands_brand_id");

                    b.HasOne("ShoesApi.Entities.Destination", "Destination")
                        .WithMany("Shoes")
                        .HasForeignKey("DestinationId")
                        .HasConstraintName("fk_shoes_destinations_destination_id");

                    b.HasOne("ShoesApi.Entities.Season", "Season")
                        .WithMany("Shoes")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("fk_shoes_seasons_season_id");

                    b.Navigation("Brand");

                    b.Navigation("Destination");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ShoesApi.Entities.Brand", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoesApi.Entities.Destination", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoesApi.Entities.Season", b =>
                {
                    b.Navigation("Shoes");
                });
#pragma warning restore 612, 618
        }
    }
}
